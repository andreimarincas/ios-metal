//
//  Shaders.metal
//  MetalDemo
//
//  Created by Andrei Marincas on 2/24/16.
//  Copyright © 2016 Andrei Marincas. All rights reserved.
//

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

/*
 vertex_array:
 In the case of the buffer arguments, the index in the parameter corresponds to the index we specified when setting the buffers on the render command encoder.
 This is how Metal figures out which parameter corresponds to each buffer.
 
 vid:
 An index that tells the function which vertex it is currently operating on.
 [[ vertex_id ]] - built-in attribute qualifier for vertex function input that is specified for the vid (vertex id) attribute.
 
 return:
 If the return type of a vertex function is not void, it must include the vertex position.
 If the vertex return type is float4, the return value refers to the vertex position (and the [[ position ]] qualifier need not be specified).
 If the vertex return type is a struct, it must include an element declared with the [[ position ]] qualifier.
 */
vertex float4 basic_vertex(const device packed_float3 *vertex_array [[ buffer(0) ]],
                           unsigned int vid [[ vertex_id ]])
{
    return float4(vertex_array[vid], 1.0);
}

fragment half4 basic_fragment()
{
    return half4(1.0);
}


/* Discussion:

 *** Function Qualifiers
 
 The qualifiers restrict how a function may be used.
 A function qualifier is used at the start of a function, before its return type.
 
 vertex
 A vertex function that is executed for each vertex in the vertex stream and that generates per-vertex output.
 
 fragment
 A fragment function that is executed for each fragment (and its associated data) in the fragment stream and that generates per-fragment output.
 
 Only a graphics function can be declared with one of the vertex or fragment qualifiers.
 For graphics functions, the return type identifies whether the output generated by the function is either per-vertex or per-fragment.
 The return type for a graphics function may be void indicating that the function does not generate output.
 
 Functions that use a vertex or fragment function qualifier cannot call functions that also use these qualifiers, or a compilation error results.
 
 
 *** Address Space Qualifiers for Variables and Arguments
 
 Address space qualifiers specify the region of memory where a function variable or argument is allocated.
 These qualifiers describe disjoint address spaces for variables: device, constant
 For graphics (vertex or fragment) functions, an argument that is a pointer or reference to a type must be declared in the device or constant address space.
 The address space for a variable at program scope must be constant.
 If multiple executing instances of a graphics function are accessing the buffer using an index such as the vertex ID, you must allocate the buffer in the device address space.
 
 * device Address Space
 
 The device address space name refers to buffer memory objects allocated from the device memory pool that are both readable and writeable.
 A buffer memory object can be declared as a pointer or reference to a scalar, vector, or user-defined struct.
 The actual size of the buffer memory object is determined when the memory object is allocated using appropriate Metal framework API calls in the host code.
 
 
 
 *** Function Arguments and Variables
 
 a device buffer = a pointer or reference to any data type in the device address space
 
 Buffers (device and constant) specified as argument values to a graphics or kernel function cannot be aliased — that is, a buffer passed as an argument value cannot overlap another buffer passed to a separate argument of the same graphics or kernel function.
 
 * Attribute Qualifiers
 
 For each argument, an attribute qualifier is optionally specified to identify the location of a buffer, texture, or sampler to use for this argument type.
 
 device and constant buffers — [[ buffer(index) ]]
 
 The index value is an unsigned integer that identifies the location of a buffer that is being assigned.
 The proper syntax is for the attribute qualifier to follow the argument/variable name.
 
*/
